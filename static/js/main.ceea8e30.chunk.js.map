{"version":3,"sources":["BmiForm.jsx","Info.jsx","Bar.jsx","App.jsx","serviceWorker.js","index.js"],"names":["BmiForm","change","useState","weight","height","date","state","setState","handleChange","e","Date","toLocaleString","split","target","name","value","onSubmit","preventDefault","className","id","type","maxLength","placeholder","onChange","Info","bmi","deleteCard","onClick","Bar","labelData","bmiData","Chart","defaults","global","legend","display","defaultFontFamily","chartRef","useRef","useEffect","myChartRef","current","getContext","gradient","createLinearGradient","addColorStop","data","labels","datasets","label","backgroundColor","borderColor","pointRadius","pointHoverRadius","pointHoverBorderColor","pointHoverBorderWidth","options","responsive","scales","xAxes","gridLines","color","ticks","fontColor","fontSize","yAxes","tooltips","titleFontSize","bodyFontSize","ref","style","undefined","App","JSON","parse","localStorage","getItem","setData","handleDelete","newState","filter","i","setItem","stringify","map","obj","val","heightInM","toFixed","length","newVal","len","slice","info","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ceea8e30.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\n\r\nconst BmiForm = ({ change }) => {\r\n  const [state, setState] = useState({\r\n    weight: '',\r\n    height: '',\r\n    date: ''\r\n  });\r\n\r\n  const handleChange = e => {\r\n    const date = new Date().toLocaleString().split(',')[0];\r\n    setState({\r\n      ...state,\r\n      [e.target.name]: e.target.value,\r\n      date\r\n    });\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (state.weight === '' || state.height === '') return;\r\n    change(state);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div className=\"row\">\r\n        <div className=\"col m6 s12\">\r\n          <label>Weight (in kg)</label>\r\n          <input\r\n            id=\"weight\"\r\n            name=\"weight\"\r\n            type=\"tel\"\r\n            maxLength=\"3\"\r\n            placeholder=\"50\"\r\n            value={state.weight}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col m6 s12\">\r\n          <label>Height (in cm)</label>\r\n          <input\r\n            id=\"height\"\r\n            name=\"height\"\r\n            type=\"tel\"\r\n            maxLength=\"3\"\r\n            placeholder=\"176\"\r\n            value={state.height}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"center\">\r\n        <button className=\"calculate-btn\" type=\"submit\">\r\n          Calculate BMI\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default BmiForm;\r\n","import React from 'react';\r\n\r\nconst Info = ({ weight, height, id, date, bmi, deleteCard }) => {\r\n  const handleDelete = e => {\r\n    deleteCard(id);\r\n  };\r\n\r\n  return (\r\n    <div className=\"col m6 s12\">\r\n      <div className=\"card\">\r\n        <div className=\"card-content\">\r\n          <span className=\"card-title\">BMI: {bmi}</span>\r\n          <div className=\"card-data\">\r\n            <span>Weight: {weight} kg</span>\r\n            <span>Height: {height} cm</span>\r\n            <span>Date: {date}</span>\r\n          </div>\r\n\r\n          <button className=\"delete-btn\" onClick={handleDelete}>\r\n            X\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Info;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { Chart } from 'chart.js';\r\n\r\nconst Bar = ({ labelData, bmiData }) => {\r\n  Chart.defaults.global.legend.display = false;\r\n  Chart.defaults.global.defaultFontFamily = \"'PT Sans', sans-serif\";\r\n\r\n  const chartRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const myChartRef = chartRef.current.getContext('2d');\r\n    let gradient = myChartRef.createLinearGradient(63, 81, 181, 700);\r\n    gradient.addColorStop(0, '#929dd9');\r\n    gradient.addColorStop(1, '#172b4d');\r\n    new Chart(myChartRef, {\r\n      type: 'line',\r\n      data: {\r\n        labels: labelData,\r\n        datasets: [\r\n          {\r\n            label: 'BMI',\r\n            data: bmiData,\r\n            backgroundColor: gradient,\r\n            borderColor: '#3F51B5',\r\n            pointRadius: 6,\r\n            pointHoverRadius: 8,\r\n            pointHoverBorderColor: 'white',\r\n            pointHoverBorderWidth: 2\r\n          }\r\n        ]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        scales: {\r\n          xAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n                color: 'white'\r\n              },\r\n              ticks: {\r\n                fontColor: 'white',\r\n                fontSize: 16\r\n              }\r\n            }\r\n          ],\r\n          yAxes: [\r\n            {\r\n              gridLines: {\r\n                display: false,\r\n                color: 'white'\r\n              },\r\n              ticks: {\r\n                fontColor: 'white',\r\n                fontSize: 16\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        tooltips: {\r\n          titleFontSize: 13,\r\n          bodyFontSize: 13\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <canvas\r\n        id=\"myChart\"\r\n        ref={chartRef}\r\n        style={{\r\n          display: bmiData !== undefined ? 'block' : 'none'\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Bar;\r\n","import React, { useState, useEffect } from 'react';\nimport BmiForm from './BmiForm';\nimport Info from './Info';\nimport Bar from './Bar';\nimport './App.css';\nimport 'materialize-css/dist/css/materialize.min.css';\n\nconst App = () => {\n  let initialState = () => JSON.parse(localStorage.getItem('data')) || [];\n  const [state, setState] = useState(initialState);\n  const [data, setData] = useState({});\n\n  const handleChange = val => {\n    let heightInM = val.height / 100;\n    val.bmi = (val.weight / (heightInM * heightInM)).toFixed(2);\n    val.id = state.length;\n    let newVal = [...state, val];\n    let len = newVal.length;\n    if (len > 7) newVal = newVal.slice(1, len);\n    setState(newVal);\n  };\n\n  const handleDelete = id => {\n    let newState = state.filter(i => {\n      return i.id !== id;\n    });\n    setState(newState);\n  };\n\n  useEffect(() => {\n    localStorage.setItem('data', JSON.stringify(state));\n    const date = state.map(obj => obj.date);\n    const bmi = state.map(obj => obj.bmi);\n    let newData = { date, bmi };\n    setData(newData);\n  }, [state]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"row center\">\n        <h1 className=\"white-text\"> BMI Tracker </h1>\n      </div>\n      <div className=\"row\">\n        <div className=\"col m12 s12\">\n          <BmiForm change={handleChange} />\n          <Bar labelData={data.date} bmiData={data.bmi} />\n          {state.length > 0 ? (\n            <div>\n              <div className=\"row center\">\n                <h4 className=\"white-text\">7 Day Data</h4>\n              </div>\n              <div className=\"data-container row\">\n                {state.map(info => (\n                  <Info\n                    key={info.id}\n                    id={info.id}\n                    weight={info.weight}\n                    height={info.height}\n                    date={info.date}\n                    bmi={info.bmi}\n                    deleteCard={handleDelete}\n                  />\n                ))}\n              </div>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}